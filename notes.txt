Accessing Request Data

global request object
request has to be imported from Flask

form data accessed through form attribute

@app.route('/login', methods=['POST', 'GET'])
def login():
    error = None
    if request.method == 'POST':
        if valid_login(request.form['username'],
                       request.form['password']):
            return log_the_user_in(request.form['username'])
        else:
            error = 'Invalid username/password'
    # the code below is executed if the request method
    # was GET or the credentials were invalid
    return render_template('login.html', error=error)


To access search parameteres,
    request.args.get('key', '')

To access cookies..
  request.cookies.get('username')

To store cookies
  resp.set_cookie('username', 'the username')

  cookies set on response objects

Redirects and Errors

redirect()
abort() - aborts request early wtih error code

from flask import abort, redirect, url_for

@app.route('/')
def index():
    return redirect(url_for('login'))

@app.route('/login')
def login():
    abort(401)
    this_is_never_executed()


To customize error page, use errorhandler(404)


Responses

return value from a view function automatically converted
into response object

To grab the response object,

wrap it in make_response()



Session
  object.
  implemented ontop of cookies and signs cookies 
  cryptographically.

  therefore use can look at contents of cookie but
  not modify it

  To use session, need secret key


  app.secret_key = b'_5ad8f8q34tha'
    //set to random string of bytes


os.urandom(16)

if cookies not showing up in session, check size
of cookie supported by browser vs size of cookie in response

Message Flashing

to create user feedback, use

flash()  - available only for next request
get_flashed_message()
app.logger - to log something

